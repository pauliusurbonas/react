[{"/home/mint/projects/react/weather-app/src/index.js":"1","/home/mint/projects/react/weather-app/src/components/WeatherItem/WeatherItem.js":"2","/home/mint/projects/react/weather-app/src/components/Selector/CountrySelector.js":"3","/home/mint/projects/react/weather-app/src/components/Selector/CitySelector.js":"4","/home/mint/projects/react/weather-app/src/components/WeatherMap/WeatherMap.js":"5","/home/mint/projects/react/weather-app/src/WeatherApp.js":"6","/home/mint/projects/react/weather-app/src/components/WeatherItem/FavItem.js":"7","/home/mint/projects/react/weather-app/src/components/Dialog/AboutDialogContent.js":"8","/home/mint/projects/react/weather-app/src/components/Dialog/ConfirmDialog.js":"9"},{"size":481,"mtime":1611955094083,"results":"10","hashOfConfig":"11"},{"size":720,"mtime":1612161439477,"results":"12","hashOfConfig":"11"},{"size":902,"mtime":1612115058752,"results":"13","hashOfConfig":"11"},{"size":1525,"mtime":1612171605974,"results":"14","hashOfConfig":"11"},{"size":1130,"mtime":1612171494795,"results":"15","hashOfConfig":"11"},{"size":5206,"mtime":1612171455562,"results":"16","hashOfConfig":"11"},{"size":289,"mtime":1612162330842,"results":"17","hashOfConfig":"11"},{"size":409,"mtime":1612161278957,"results":"18","hashOfConfig":"11"},{"size":298,"mtime":1612156105266,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"13arj6u",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/mint/projects/react/weather-app/src/index.js",[],["42","43"],"/home/mint/projects/react/weather-app/src/components/WeatherItem/WeatherItem.js",[],"/home/mint/projects/react/weather-app/src/components/Selector/CountrySelector.js",[],"/home/mint/projects/react/weather-app/src/components/Selector/CitySelector.js",[],"/home/mint/projects/react/weather-app/src/components/WeatherMap/WeatherMap.js",["44"],"import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './style/WeatherMap.scss';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOXGL_API_KEY\n\nconst WeatherMap = (map) => {\n  const mapContainerRef = useRef(null);\n\n  const [lng, setLng] = useState(5);\n  const [lat, setLat] = useState(34);\n  const [zoom, setZoom] = useState(1.5);\n\n  // Initialize map when component mounts\n  useEffect(() => {\n    map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    // Add navigation control (the +/- zoom buttons)\n    //map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n    map.on('move', () => {\n      setLng(map.getCenter().lng.toFixed(4));\n      setLat(map.getCenter().lat.toFixed(4));\n      setZoom(map.getZoom().toFixed(2));\n    });\n\n    // Clean up on unmount\n    return () => map.remove();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className='map-cont' ref={mapContainerRef} />\n  );\n};\n\nexport default WeatherMap;\n","/home/mint/projects/react/weather-app/src/WeatherApp.js",["45"],"import React, {Component} from 'react';\nimport './style/WeatherApp.scss';\nimport CountrySelector from './components/Selector/CountrySelector';\nimport CitySelector from './components/Selector/CitySelector';\nimport WeatherItem from './components/WeatherItem/WeatherItem';\nimport FavItem from './components/WeatherItem/FavItem';\nimport WeatherMap from './components/WeatherMap/WeatherMap';\nimport { CustomDialog } from 'react-st-modal';\nimport AboutDialogContent from './components/Dialog/AboutDialogContent';\nimport axios from 'axios';\nconst dotenv = require('dotenv');\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherItemVisibilityClass: 'hidden',\n      bgImageStyle: '',\n      favList: []\n    };\n    this.citySelectorRef = React.createRef();\n  }\n\n  onCountryChange = (countryCode) => {\n    let state = this.state;\n    state.weatherItemVisibilityClass = \"hidden\";\n    state.country = countryCode;\n\n    this.setState(state);\n    this.citySelectorRef.current.loadCities(countryCode);\n  }\n\n  onCityChange = (cityName) => {\n    this.loadCityWeather(cityName);\n  }\n\n  loadCityWeather = (cityName) => {\n    const options = {\n      method: 'GET',\n      url: 'https://community-open-weather-map.p.rapidapi.com/weather',\n      params: {\n        q: cityName + ',' + this.state.country,\n        id: '2172797',\n        units: 'metric'\n      },\n      headers: {\n        'x-rapidapi-key': process.env.REACT_APP_APIDAPI_KEY,\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\n      }\n    };\n\n    axios.request(options).then(res => {\n      let state = this.state;\n      state.id = res.data.id;\n      state.city = cityName;\n      state.weatherItemVisibilityClass = \"page-form-data\";\n      state.lon = res.data.coord.lon;\n      state.lat = res.data.coord.lat;\n      state.condition = res.data.weather[0].description;\n      state.temp = Math.round(res.data.main.temp);\n      state.feelsLike = res.data.main.feels_like;\n      state.wind = res.data.wind.speed;\n      state.icon = 'http://openweathermap.org/img/w/' + res.data.weather[0].icon + '.png';\n      this.setState(state);\n    }).catch(function (error) {\n      alert(\"Failed to load weather data\");\n    \tconsole.error(error);\n    });\n\n    this.loadCityImage(cityName);\n  }\n\n  getRandomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  updateState = (obj) => {\n    const state = Object.assign(this.state, obj);\n    this.setState(state);\n  }\n\n  loadCityImage = (cityName) => {\n    const options = {\n      method: 'GET',\n      url: 'https://cors-anywhere.herokuapp.com/pixabay.com/api',\n      params: {\n        key: process.env.REACT_APP_PIXABAY_API_KEY,\n        q: cityName.replace(' ','+'),\n        image_type: 'photo',\n        //category: 'places',\n        safesearch: 'true'\n      }\n    };\n    this.updateState({bgImageStyle: \"\"})\n    axios.request(options).then(res => {\n      let state = this.state;\n      if(res.data.hits.length < 1) {\n        this.updateState({bgImageStyle: \"\"});\n      } else {\n        var id = this.getRandomNumber(0,res.data.hits.length - 1);\n        this.updateState({bgImageStyle: res.data.hits[id].webformatURL});\n      }\n      this.setState(state);\n    }).catch(function (error) {\n      alert(\"Failed to load image data\");\n      console.error(error);\n    });\n  }\n\n  isFavAdded = () => {\n    for(let i = 0; i < this.state.favList.length; i++) {\n      if(this.state.favList[i].id === this.state.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  addFavItem = () => {\n    this.state.favList.push(this.state);\n    this.setState(this.state);\n  }\n\n  onFavToggle = () => {\n    if(!this.isFavAdded()) {\n      this.addFavItem();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"page-cont\">\n          <div className=\"page-form\">\n            <div className=\"page-form-select\">\n              <div className=\"page-title\">What's the weather today?</div>\n              <CountrySelector onChange={this.onCountryChange}/>\n              <CitySelector onChange={this.onCityChange} ref={this.citySelectorRef}/>\n              <div className=\"page-form-btn-cont\">\n                <div className=\"page-menu\" onClick={async () => {\n                    await CustomDialog(<AboutDialogContent />, {\n                      title: 'About',\n                      showCloseIcon: true,\n                    });\n                  }}>\n                  About\n                </div>\n              </div>\n            </div>\n            <div className={this.state.weatherItemVisibilityClass} style={{ backgroundImage: `url(${this.state.bgImageStyle})` }}>\n              <WeatherItem cityName={this.state.city} temp={this.state.temp}\n                condition={this.state.condition} onChange={this.onFavToggle} icon={this.state.icon}/>\n            </div>\n          </div>\n          <WeatherMap onViewportChange={this.state.viewport}/>\n        </div>\n        <div className=\"fav-list\">\n        {this.state.favList.map((item) =>\n        <FavItem className=\"fav-item\" cityName={item.city} temp={item.temp}\n          condition={item.condition}/>\n        )}\n        </div>\n      </div>\n    );\n  }\n}\n","/home/mint/projects/react/weather-app/src/components/WeatherItem/FavItem.js",[],"/home/mint/projects/react/weather-app/src/components/Dialog/AboutDialogContent.js",[],["46","47"],"/home/mint/projects/react/weather-app/src/components/Dialog/ConfirmDialog.js",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":16,"column":11,"nodeType":"55","endLine":21,"endColumn":7},{"ruleId":"56","severity":1,"message":"57","line":11,"column":7,"nodeType":"58","messageId":"59","endLine":11,"endColumn":13},{"ruleId":"49","replacedBy":"60"},{"ruleId":"51","replacedBy":"61"},{"ruleId":"56","severity":1,"message":"62","line":9,"column":17,"nodeType":"58","messageId":"59","endLine":9,"endColumn":23},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","Assignments to the 'map' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-unused-vars","'dotenv' is assigned a value but never used.","Identifier","unusedVar",["63"],["64"],"'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]